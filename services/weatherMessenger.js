const moment = require('moment-timezone');
const WeatherAnalyzer = require('./weatherAnalyzer'); // –ò–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ–≥–æ–¥—ã
class WeatherMessenger {
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
    static createMessage(data) {
        const { serviceName, rainData } = data;
        let message = `${serviceName} service: \n`;
    
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const todayForecastEntries = this.getTodayForecastEntries(rainData.weatherData);
        if (todayForecastEntries.length > 0) {
            message += `‚è≥ –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n${todayForecastEntries.join('\n')}\n`;
        }
    
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∂–¥–µ
        message += this.getRainMessagePart(rainData);
    
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        const extremes = WeatherAnalyzer.getDailyTemperatureExtremes(rainData.weatherData);
        if (extremes.min !== null && extremes.max !== null) {
            message += `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç ${extremes.min} –¥–æ ${extremes.max}`;
        } else {
            message += 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
        }
    
        return message;
    }
    static getTodayForecastEntries(weatherData) {
        const now = new Date();
        const allowedHours = new Set([0, 3, 6, 9, 12, 15, 18, 21]);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const filtered = weatherData.times
            .map((time, index) => ({
                time: new Date(time),
                temp: weatherData.temperatures[index]
            }))
            .filter(({time, temp}) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è:
                // 1. –ï—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                // 2. –ß–∞—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏
                // 3. –í –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                return time > now &&
                    allowedHours.has(time.getHours()) &&
                    time.getDate() === now.getDate();
            })
            .sort((a, b) => a.time - b.time); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return filtered.map(({time, temp}) => {
            const formattedTime = moment(time)
                .tz('Europe/Moscow')
                .format('HH:mm');
            const tempStr = temp > 0 ? `+${temp}` : temp;
            return `${formattedTime} : ${tempStr}`;
        });
    }
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    static processTempString(tempStr) {
        return tempStr.replace(/([+-]?\d+)\(([+-]?\d+)\)/g, (match, main, feelsLike) => {
            return main === feelsLike ? main : match;
        });
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    static cleanWeatherStatus(status) {
        return status
            .replace(/,?\s?–Ω–µ–±–æ–ª—å—à–æ–π\s?/gi, '')
            .replace(/\s{2,}/g, ' ');
    }

    static getRainMessagePart(rainData) {
        if (rainData.isRaining) {
            let msg = `üåßÔ∏è –°–µ–π—á–∞—Å –∏–¥–µ—Ç –¥–æ–∂–¥—å (${rainData.currentRain.precipitation} –º–º)\n`;
            if (rainData.futureRains.length > 0) {
                const futureIntervals = rainData.futureRains.map(r => `${r.start}-${r.end}`).join(',\n');
                msg += `‚è≥ –ü–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n${futureIntervals}\n`;
            }
            return msg;
        }
        if (rainData.futureRains.length > 0) {
            const rainIntervals = rainData.futureRains.map(r => `${r.start}-${r.end}`).join(',\n');
            return `üåßÔ∏è –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å:\n${rainIntervals}\n`;
        }
        return '‚òÄÔ∏è –û—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è\n';
    }

    static getCurrentPeriodMessagePart(currentPeriod) {
        return currentPeriod
            ? `(${this.formatTime(currentPeriod.start)}-${this.formatTime(currentPeriod.end)})`
            : '';
    }

    static formatTime(date) {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        }).slice(0, 5);
    }
}

module.exports = WeatherMessenger;